generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String?
  noWA             String?
  password         String
  gambar           String?            @default("public/DEFAULT_USER.png")
  role             EnumRole           @default(USER)
  verifyAt         DateTime?
  jwtVersion       Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  NotificationUser NotificationUser[]
  KelasUser        KelasUser[]
}

model HomeSection {
  id         Int                 @id @default(autoincrement())
  title      String?
  bintang    Int?
  pekerjaan  String?
  keterangan String?             @db.Text
  url        String?
  gambar     String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  tipe       enumHomeSectionTipe
}

model NotificationUser {
  id             Int                 @id @default(autoincrement())
  userId         Int
  notificationId Int?
  isRead         Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  title          String?
  status         NotificationStatus?
  type           NoticationType      @default(SYSTEM)
  keterangan     String?             @db.Text
  url            String?
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([notificationId], map: "NotificationUser_notificationId_fkey")
  @@index([userId], map: "NotificationUser_userId_fkey")
}

model Kelas {
  id        Int         @id @default(autoincrement())
  name      String
  gambar    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  KelasUser KelasUser[]
}

model KelasUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  kelasId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  kelas     Kelas    @relation(fields: [kelasId], references: [id], onDelete: Cascade)

  @@index([kelasId], map: "KelasUser_kelasId_fkey")
  @@index([userId], map: "KelasUser_userId_fkey")
}

enum EnumRole {
  ADMIN
  USER
}

enum enumHomeSectionTipe {
  BANNER
  REVIEW
  CUSTOM
}

enum NoticationType {
  SYSTEM
  USER
}

enum NotificationStatus {
  PAYMENT_PENDING
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  BIMBEL_CHANGES
}
